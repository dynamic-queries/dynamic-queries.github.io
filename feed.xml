<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://dynamic-queries.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dynamic-queries.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-12T10:03:04+00:00</updated><id>https://dynamic-queries.github.io/feed.xml</id><title type="html">Rahul Manavalan</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">(WIP) Frobenius Perron Operator</title><link href="https://dynamic-queries.github.io/blog/2023/frobenius_perron/" rel="alternate" type="text/html" title="(WIP) Frobenius Perron Operator" /><published>2023-06-08T08:00:00+00:00</published><updated>2023-06-08T08:00:00+00:00</updated><id>https://dynamic-queries.github.io/blog/2023/frobenius_perron</id><content type="html" xml:base="https://dynamic-queries.github.io/blog/2023/frobenius_perron/"><![CDATA[]]></content><author><name></name></author><category term="review" /><category term="OperatorML" /><summary type="html"><![CDATA[What you need when Diffusion Models make no sense.]]></summary></entry><entry><title type="html">(WIP) Lie Group Integrators</title><link href="https://dynamic-queries.github.io/blog/2023/lie_group/" rel="alternate" type="text/html" title="(WIP) Lie Group Integrators" /><published>2023-06-07T08:00:00+00:00</published><updated>2023-06-07T08:00:00+00:00</updated><id>https://dynamic-queries.github.io/blog/2023/lie_group</id><content type="html" xml:base="https://dynamic-queries.github.io/blog/2023/lie_group/"><![CDATA[]]></content><author><name></name></author><category term="review" /><category term="DifferentialEquations" /><summary type="html"><![CDATA[Structure preserving integrators for Differential Equations.]]></summary></entry><entry><title type="html">(WIP) Exponential Integrators</title><link href="https://dynamic-queries.github.io/blog/2023/expo_int/" rel="alternate" type="text/html" title="(WIP) Exponential Integrators" /><published>2023-05-26T08:00:00+00:00</published><updated>2023-05-26T08:00:00+00:00</updated><id>https://dynamic-queries.github.io/blog/2023/expo_int</id><content type="html" xml:base="https://dynamic-queries.github.io/blog/2023/expo_int/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Differential Equations are used as modeling tools in several scientific disciplines. Since the advent of affordable computing technologies, a prevalent theme in these fields is to numerically approximate the solutions to these differential equations using numerical integration.</p>

<p>Consider a first order differential equation, formulated as an initial value problem.</p>

\[\begin{align}
\label{eq:IVP}
\frac{d}{dx}y(x) = f(y(x),x) \\
y(x=0) = y_0 \in \mathbb{R}^n
\end{align}\]

<p>The central theme of numerical integration is to transform the solution of the IVP in (\ref{eq:IVP}) to the solution of the following quadrature problem.</p>

\[\begin{equation}
    \label{eq:quad}
    y(x) = y_0 + \int_{x_0}^{x} dz\:f(z) = y_0 + \frac{1}{x-x_0} \int_{0}^{1} dq\:f(q) 
\end{equation}\]

<p>Admittedly, there are several techniques to approximate the integral in (\ref{eq:quad}). Here we are interested in a class of integrators that are suitable for stiff differential equations.</p>

<h2 id="stiff-differential-equations">Stiff Differential Equations</h2>
<p>Stiffness of differential equations is an ambiguous term. Hairer and Wanner famouosly write about stiff differential equations, <em>as equations where evaluation of solutions using explicit integration methods is too inefficient</em>. There have been other attempts to formalize this “definition” using the eigenfunctions of the differential operator. Intuitively, stiff differential equations are those with \(f(y(x),x)\) evolving in disparate scales along its different bases directions.</p>

<h2 id="exponential-integrators">Exponential Integrators</h2>
<p>The question of resolving the disparate timescales in \(f(y(x),x)\) is addressed in exponential integrators as follows.</p>

\[\begin{align}
    \label{eq:exp-int}
    \frac{d}{dx}y(x) = Ay(x) + g(y(x),x) \textrm{  [Linearization] }
\end{align}\]

<p>The solution to the homogenous problem in (\ref{eq:exp-int}), is</p>

\[\begin{align}
    \label{eq:exact-sol}
    y(x) = \exp^{xA} y(0)
\end{align}\]

\[\begin{equation}
    \label{eq:exp}
    \exp^{zA} = \mathcal{I} + \frac{zA}{1!} + \frac{(zA)^2}{2!} + \frac{(zA)^3}{3!} + ...
\end{equation}\]

<p>For a generic heterogenity, \(g(x)\), the solution is expressed in terms of its propagator.</p>

\[\begin{equation}
    \label{eq:hetero}
    y(x) = \exp^{xA} y(0) + \int dz \: \exp^{(x-z)A} g(y(z),z)
\end{equation}\]]]></content><author><name></name></author><category term="review" /><category term="DifferentialEquations" /><summary type="html"><![CDATA[ODE Integrators for Stiff Differential Equations.]]></summary></entry><entry><title type="html">(WIP) Numerical Methods for Density Functional Theory</title><link href="https://dynamic-queries.github.io/blog/2023/dft/" rel="alternate" type="text/html" title="(WIP) Numerical Methods for Density Functional Theory" /><published>2023-05-11T08:00:00+00:00</published><updated>2023-05-11T08:00:00+00:00</updated><id>https://dynamic-queries.github.io/blog/2023/dft</id><content type="html" xml:base="https://dynamic-queries.github.io/blog/2023/dft/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>It has been known for years that the physical laws underlying any arbitrary physical systems can be accurately described using quantum mechanics.
While this viewpoint is philosophically elegant, it is not really useful as quantum mechanical descriptions of many-particle interactions, is formulated in a Hilbert’s space which scales exponentially with the number of particles, posing a computational bottleneck, which Bellman called the <strong>Curse of Dimensionality</strong>.</p>

<p>One can often get away with this, by modelling systems with mean field, classical particle based and even continuum based approximations as one often does in quantum field theory, kinetic theory of fluids and fluid mechanics respectively. <a href="https://en.wikipedia.org/wiki/Spectroscopy">Molecular Spectroscopy</a> is one discipline where errors induced by such approximations is often dire, requiring explicit quantum mechanical descriptions despite the aforementioned bottleneck due to Bellman.</p>

<p>Luckily there are several approximations that have been proposed that aim at circumventing this problem. One such method is Density Functional Theory. In what follows, I present a self-consistent introduction to Density Functional Theory (DFT) from the perspective of numerical analysis and an efficient algorithmic implementation.</p>

<h2 id="a-many-body-problem">A Many Body Problem</h2>

<p>To start with, I setup a generic manybody problem whose formulation depends on the following two postulates.</p>

<blockquote>
  <p><strong><em>First Postulate of QM</em></strong> : All the properties of a system \(\mathcal{S}\), are sufficiently described by a complex valued wavefunction \(\Psi\).</p>
</blockquote>

<blockquote>
  <p><strong><em>Born Oppenheimer Approximation</em></strong> : Due to the massive nature of nuclei with respect to electrons, their movement can be described classicaly with quantum mechanically evaluated electronic forces influencing their motion.</p>
</blockquote>

<p>Consider a system \(\mathcal{S}\) with \(N\) nuclear centers and \(N_e\) electrons. If \(x_i \in \mathbb{R}^3\) denotes the position of an electron, then \(\Psi:\mathbb{R}^{3N_e} \mapsto \mathbb{C}\).</p>

<p>Due to the BO approximation, one is not interested in calculating the time evolution of \(\Psi\), rather given an electronic configuration, \(r\), we are interested in evaluating the <strong>ground state energy function</strong> parameterized by the nuclear positions \(R\). This is done so by solving the stationary Schrodinger’s equation.</p>

\[\begin{equation}
    \label{eq:SSE}
    H\:\Psi(r,R) = E(R)\:\Psi(r,R)
\end{equation}\]

\[\begin{equation}
    \label{eq:SO}
    H = -\frac{1}{2}\sum_{i=1}^{N_e} \nabla_{r_i}^2 + \sum_{j&gt;i}^{N_e} \frac{1}{\|r_i - r_j\|} + \sum_{i,j=1}^{N,N_e} \frac{1}{\|R_i - r_j\|} + V_{ext}(r,R,\omega)
\end{equation}\]

<p>Subsequently, the nuclear centers can be updated using Newton’s laws.
\(\begin{align}
    \label{eq:Newton}
    \frac{d^2}{dt^2} R(t) = -\nabla_{R} E(R) \\ 
    R(0) = R_0 \\ 
    \frac{d}{dt}R(0) \sim \mathcal{M}(T)
\end{align}\)</p>

<p>where \(\mathcal{M}\) is Maxwellian distribution depending on temperature \(T\).</p>

<p>The eigenproblem in (\ref{eq:SSE})-(\ref{eq:SO}) suffers from the said curse of dimensionality for larger systems, ruling out the use of exact-diagonalization algorithms.</p>

<h2 id="density-functional-theory">Density Functional Theory</h2>

<p>Alternatively, one can consider the variational formulation of (\ref{eq:SSE}) due to Fischer-Courant.</p>

\[\begin{equation}
    \label{eq:variantional}
    E_{min} = \arg \min_{\Psi \in \mathcal{A}_N, \langle\Psi|\Psi \rangle=1} \langle \Psi |H|\Psi \rangle
\end{equation}\]

<p>where \(\mathcal{A}_N\) is the hypothesis space of <a href="http://psi.phys.wits.ac.za/teaching/Connell/phys284/2005/lecture-03/lecture_03/node16.html">anti-symmetric</a> functions.</p>]]></content><author><name></name></author><category term="review" /><category term="DFT" /><summary type="html"><![CDATA[A Primer on Electronic Structure Calculations.]]></summary></entry><entry><title type="html">(WIP) Generative modeling using Diffusion map particle system</title><link href="https://dynamic-queries.github.io/blog/2023/gen_dmap/" rel="alternate" type="text/html" title="(WIP) Generative modeling using Diffusion map particle system" /><published>2023-05-06T08:00:00+00:00</published><updated>2023-05-06T08:00:00+00:00</updated><id>https://dynamic-queries.github.io/blog/2023/gen_dmap</id><content type="html" xml:base="https://dynamic-queries.github.io/blog/2023/gen_dmap/"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>This review aims at providing a self-contained, pedantic overview of deep generative modelling using score based diffusion, culminating with discussions on <a href="https://arxiv.org/abs/2304.00200">the recent paper</a> from Youssef Marzouk.</p>

<p>Generative models are manifestations of this widely held philosophical belief:</p>
<div class="alert alert-block alert-success">
<b>Philosophical Belief 1</b> All natural phenomena are generative. That is to say, there is an underlying generative process for every physical occurance.
</div>

<p>Clearly, there are infinitely many possibilities that may ensue from such a generative process. Assuming that we can enumerate all of these outcomes, say with set \(\Omega\), then a generative process \(\mathcal{G}\) underlying a system \(\mathcal{S}\) can be effectively described using probability theory. Therefore, the problem of generative modelling is in-effect the problem of probability density (distribution) estimation.</p>

<p>In practice, there are several restrictions to effectively estimating probability density, \(p_{\mathcal{G}}(z) \: \forall z \in \Omega\), from a finite set of observations \(\Omega_f \subset \Omega\). Regardless, any method \(m\) that claims to do so must satisfy these conditions.</p>
<ol>
  <li>For a suitably chosen functional norm, \(\lim_{\Omega_f \mapsto \Omega} \|p_{\mathcal{G}}^{m}(z) - p_{\mathcal{G}}(z)\|_f \mapsto 0\)</li>
  <li>It must be computationally effcient to sample from \(p_{\mathcal{G}}^{m}(z)\).</li>
  <li>It must be computationally effcient to evaluate \(p_{\mathcal{G}}^{m}(z)\).</li>
</ol>

<p>Traditional functional approximation methods can satisfy (1) with an arbitrary level of accuracy, yet fail with respect to (2) and (3) due to the curse of dimensionality. Deep learning models on the other hand, are adept at circumventing this problem. Popular deep-generative models (in no particular order) include</p>

<div class="alert alert-block alert-success">
   1. Adversarial Generative Models <br />
   2. Variational Autoencoders <br />
   3. Normalizing Flows <br />
   4. Score based Diffusion Models <br />
   5. Autoregressive Models <br />
   6. Energy based Models <br />
</div>
<p>to name a few.</p>

<p>In what follows, a tutorial styled introduction to score based diffusion algorithms is presented and are compared with the method using diffusion map particle system.</p>

<h3 id="score-based-diffusion">Score based diffusion</h3>

<p>Diffusion models are based on certain assumptions and results, which we will assume are axiomatic.</p>

<ol>
  <li>Let \(p_f\) be the probability distribution defined over a certain function space \(\mathcal{F}\) such that \(\forall f \in \mathcal{F}, f:x \mapsto y\) where \(x,y \in \mathbb{R}^d\).</li>
  <li>Let there exist a time dependent stochastic differential operator \(\mathcal{L}_t\) which transforms \(f(x) \sim p_f\) such that \(\lim_{t \mapsto \infty} \mathcal{L}_t f(x) = g(x)\) where \(g(x) \sim \mathcal{GP}(\bar{x},k(x,x'))\).</li>
  <li>For every such forward operator, there exists an equivalent reverse time stochastic differential operator \(\tilde{\mathcal{L}_t}\) such that \(\lim_{t \mapsto \infty} \tilde{\mathcal{L}_t} g(x) = f(x)\).</li>
</ol>

<p>2 and 3, taken together results in differentiable and invertible map from a distribution over a trivial function space (noisy functions in this case) to a distribution over functions with certain structure. This forms the crux of generative modeling using score based diffusion. The key idea is to sample or evaluate the density of functions on the trivial distribution and transform the samples back and forth by solving stochastic differential equations. This further leads to the following questions.</p>

<ol>
  <li>For a given \(\mathcal{F}\), what is the most appropriate choice of \(\mathcal{L}\) in terms of computational tractablity? That is,
    <ol>
      <li>Which stochastic differential equation, reaches its steady state relatively quickly?</li>
      <li>Which numerical integration scheme preserves the structure of any \(f \sim \mathcal{F}\)?</li>
    </ol>
  </li>
  <li>What is the dual operator \(\tilde{\mathcal{L}}\) for a given \(\mathcal{L}\)?</li>
</ol>

<p>For better or worse, there is no clear resolution on the “best SDE” and the “best numerical integrator” for a given function class. Most of today’s state of the art, in this regard, is based on heuristics. The problem of the dual operator on the other hand, has a robust mathematical background which we will elucidate now.</p>]]></content><author><name></name></author><category term="review" /><category term="GenMod" /><summary type="html"><![CDATA[Marrying two unlikely algorithms for physical modeling.]]></summary></entry></feed>